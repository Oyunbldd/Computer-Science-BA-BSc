
Tuples:

List of different types of elements.

(1,f) :: (Int,Char)
("world",True,2) :: (String,Bool,Int)
([1,2],sqrt) :: ([Inter],Real->Real)


fst :: (a,b) -> a
fst(x,y) = x
Start = fst (10, "world") // 10
but we only using this function `length.list == 2`

snd :: (a,b) -> b
snd (x,y) = y
Start = snd(1, (2,3)) // (2,3)


f :: (Int, Char) -> Int
f (n,x) = n + toInt x
Start = f(1,'a') // 98


splitAt :: Int [a] -> ([a],[a])
splitAt n xs = (take n xs, drop n xs)

Start = splitAt 3 ['hello'] // ([h,e,l], [l,o])

search :: [(a,b)] a -> b | = a
search [(x,y) : ts ] s
| x == s = y
= otherwise = search ts s

    Zipping:

    zip2:: [a] [b] -> [(a,b)]
    zip2 [] [] = []
    zip2 [] ys = []
    zip2 xs [] = []
    zip2 [x:xs] [y:ys] = [(x,y) : zip2 xs ys]

    Start = zip2 [1,2,3] [a..c] // [(1,a),(2,b) , (3,c)]

    zip :: ([a] , [b]) -> [(a,b)]
    zip (x,y) = zip2 x y 

    Start = zip([1,2,3],[a..c]) // [(1,a),(2,b),(3,c)]



 List comprehensions

 Start :: [Int]
 Start = [x * x \\ x <- [1..10]] // [1,4,9,16...100]

 //expressions before double backslash
 //generators after double backslash   
 //i.e expressions of from x <- xs x ranges over values of xs
 //for each value value the expressions is computed

 Start = map (\x = x * x) [1..10] //[1,4,9,16..100]


 //constraints after generators
 Start :: [Int]
 Start = [x * x \\ x <- [1..10] | x rem 2 == 0] //[4,16,36,64,100]


    Start :: [(Int, Int)]
    Start = [(x,y) \\ x <- [1..2], y <-[4..6]]
    //[(1,4),(1,5),(1,6),(2,4),(2.5),(2,6)]

    //nested combination of generators
    //coma combinator - generates every possible combination of the
    //for each x value y traverse the given list

//parallel combinator of generators is &
Start = [(x,y) \\ x <- [1,2] & y <- [4,5,6]]    
     // [(1,4),(2,5)]

//multiple generators with constraints
Start = [(x,y) \\ x <- [1..5], y <- [1..x] | isEven x]
// [(2,1), (2,2), (4,1), (4,2), (4,3), (4,4)]

List comprehensions - equivalences

mapc :: (a->b) [a] -> [b]
mapc f y = [f x \\ x <- y] //y passing f function

filterc :: (a->Bool) [a] -> [a]
filterc p y = [x \\ x <- y | p x]

zipc :: [a][b] -> [(a,b)]
zipc x y = [(a,b) \\ a <-x & b <- y]

//functions like sum , reverse, isMember ,take
//are hard to write using list comprehensions


GENERATING INFINITE LIST

Start = [2..]
Start = [1,3..]


fromn :: Int -> [Int]
fromn n = [n: from (n+1)]

Start = fromn 8 //[8,9..]

//intermediate result is INFINITE

Start = map ((^)3)[1..]

//final result is finite
Start = takeWhile((>)1000) (map((^)3)[1..])
// [3,9,27,81,243,729]

//generating infinite list with repead from StdEnv

repeat :: a -> [a]
repeat x = list
 where list = [x:list]
Start = repeat 5 // [5,5..]


repeatn :: Int a ->[a]
repeatn n x = take n (repeat x)

Start = repeatn 5 8 [8,8,8,8,8]

    Infite lists - iterate 

    //generating infinite list with iterate from StdEnv

    iterate :: (a -> a) a -> [a]
    iterate f x = [ x : iterate f(f x)]

    Start = iterate inc 5 // [5,6,7...]
    Start = iterate ((+)1) 5 //[5,6,7,8...]

    Start = iterate ((*)2) 1 // [1,2,4,8,16..]

    Start = iterate (\x = x/10)54321 //[54321,5432,543,54,5,0,0...]

    Start = reverse ( map (\x = x rem 10) (takeWhile ((<)0)
                                            iterate(\x = x /10) 54321))
                    // [5,4,3,2,1]