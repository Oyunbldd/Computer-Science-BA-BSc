
    - Data structures -> store and manipulate collections of data

List:    
    - Sequence of elements of the same type elements
    - The elements of a list can be of any type
    - They are written between [] brakets
    - considered recursive data type
    - Lists in Clean are regarded as linked list -> a chain of boxes refferring to each other
    - Empty list is []
    - Every list has a type, the type of the contained elements
[1:[2,3,4]] = [1,2,3,4]
[1,2,3] = [1:[2:[3]]]

One of the most important data structres in FP is the list

l1 :: [Int]
l1 = [1, 2, 3, 4, 5]

l2 :: [Bool]
l2 = [True, False, True]

l3 :: [Real -> Real]
l3 = [sin , cos, sin]

l4 :: [[Int]]
l4 = [[1,2,3],[8,9]]

l5 :: [a]
l5 = []

l6 :: [Int]
l6 = [1..10]

l7 :: [Int]
l7 = [1..]

The elements need not be constants, may be determined by computation
[1+5, 2*10 , length[1,2,3,4,5]] :: [Int]
[5<10, x=8, a&&b] :: [Bool]
the used expressions must be of the same type


sum [] -> empty list of numbers Int or Real
and [] -> empty list of Booleans
[[], [1,2], [3]] -> empty list of Booleans
[[True], [4>1], []] -> empty list of Booleanss
length [] - empty list of anytype values of type and

Start =
[1..10] // [1,2,3,4,5,6,7,8,9,10]
[1,2...10]// [1,2,3,4,5,6,7,8,9,10]
[1,0..-10]// [1,0,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10]
[1.. -10] // []
[1..0] // []    
[1..1]// [1]
[1,3..4] //[1,3]
[1..] //[1,2,3,4,5 ........
[1,3..] // [1,3,5,7,9,11....
[100,80..] // [100, 80, 60, 40 ,20 ....


Start =
    hd [1,2,3,4,5] // 1  -> head
    tl [1,2,3,4,5] // [2,3,4,5] -> tail
    drop 2 [1,2,3,4,5] // [3,4,5]
    take 2 [1,2,3,4,5] // [1,2]
    [1,2,3] ++ [6,7] // [1,2,3,4,5,6,7]
    reverse [1,2,3] // [3,2,1]
    length [1,2,3,4] // 4
    [1..5]!!2 // 3
    last [1,2,3] // 3
    init [1,2,3]//  [1,2]
    isMember 2 [1,2,3]  // True
    isMember 5 [1,2,3] // False
    flatten [[1,2],[3,4,5],[6,7]] // [1,2,3,4,5,6,7]



Definition of Some Operation

TAKE FUNCTION:
take :: Int [a] -> [a]
take n [] = []
take n [x :xs]
| n < 1 = []
| otherwise = [x : take(n-1) xs]

Start = take 2 [] // []
Start = take 2 [1..10] // [1,2]
Start = take 0 [1..5] // []

take 2 [1..5]
n=2 , x=1, xs=[2,3,4,5] => [1 : take 1 [2,3,4,5]]
n=1 , x=2, xs=[3,4,5] => [1 : [2 : take 0 [3,4,5]]]
n=0 < 1  => [1: [2: []]] = [1,2]

take function doing take first N element in List



DROP FUNCTION :
drop :: Int [a] -> [a]
drop n [] = []
drop n [x : xs]
| n < 1 = [x : xs]
| otherwise = drop(n-1) xs


Start = drop 5 [1,2,3] // []
Start = drop ([1..5]!!2)[1..5] // [4,5]
Start = drop 0 [1..5] // [1,2,3,4,5]

drop 2 [1..5]
n=2, x=1, xs=[2,3,4,5]  drop 1 [2,3,4,5]
n=1, x=2, xs=[3,4,5]    drop 0 [3,4,5]
n=0 < 1  => [3,4,5]

drop function doing drop first N elements in List



take :: Int [a] -> [a]
take n [] = []              // for [] result is []
take n [x : xs]             
| n < 1 = []
| otherwise = [x : take(n-1) xs]    //collecting heads


drop :: Int [a] -> [a]
drop n [] = []
drop n [x : xs]
| n < 1 = [x : xs]
| otherwise = drop (n-1) xs      //ignoring heads


REVERSE FUNCTION:

reverse : [a] -> [a]
reverse [] = []
reverse [x:xs] = reverse xs ++ [x]

Start = reverse [1,3..10] // [9,7,5,3,1]
Start = reverse []        // []
Start = reverse [5,4..-5] // [-5,-4,-3,-2,-1,0,1,2,3,4,5]

reverse [1..3]
(reverse[2,3]) ++ [1]
(reverse[3]) ++ [2] ++ [1]
(reverse[]) ++ [3] ++ [2] ++ [1]
[] ++ [3] ++ [2] ++ [1] = [3,2,1]



ISMEMBER FUNCTION

isMember :: a [a] -> Bool | Eq a
isMember x [] = False
isMember x [hd:tl] = hd == x || isMember x tl

Start = isMember 0 []       //False
Start = isMember -1 [1..10]     //False
Start = isMember ([1..5]!!1)[1..5] //True


FLATTEN FUNCTION

flatten :: [[a]] -> [a]
flatten [] = []
flatten [h:5] = h ++ flatten t

Start = flatten [[1,2],[5],[6,7,9]] // [1,2,5,6,7,9]

//omitting values

f :: Int Int -> Int

f _ x = x
Start = f 4 5 // 5


Definitions by recursion
//recursive function onf lists - calling built-in functions
sum1 x
| x = [] = 0
| otherwise = hd x + sum1 (tl x)

//recursive function on lists - using [head : tail] pattern
sum2 [] = 0
sum2 [first : rest] = first+ sum2 rest
Start = sum1 [1..5] // 15 the same for sum2